
////////////////////////////////////////////////////////////////////////////////
//
// All Rights Reserved, Copyright(C),2013
// Licenced Material of by zhaoyiwei
// This file is auto generated by IOLibMaker, Do NOT modify
//
////////////////////////////////////////////////////////////////////////////////
//
// SubSystem: NDS_UpdCityInfoListNDS_UpdCityInfoListのデータアクセス用のライブラリ
// Class Name:    NDS_UpdCityInfoListNDS_UpdCityInfoListのWriteBack用のクラス
//
////////////////////////////////////////////////////////////////////////////////
#include	"InnerCommon.h"
#include	"NDS_UpdInfo_Struct.h"
#include	"NDS_UpdInfo_OutsideRef.h"
#include	"NDS_UpdInfo_InsideRef.h"
#include	"NDS_UpdInfo_FormatStructure.h"
#include	"NDS_UpdCityInfoList_Struct.h"
#include	"NDS_UpdCityInfoList_OutsideRef.h"
#include	"NDS_UpdCityInfoList_InsideRef.h"
#include	"NDS_UpdCityInfoList_FormatStructure.h"

const IOLib_StructType StructType_NDS_UpdCityInfoList_NDS_UpdCityInfo			=	_T("NDS_UpdCityInfo");
const IOLib_StructType StructType_NDS_UpdCityInfoList_NDS_UpdProvinceInfo		=	_T("NDS_UpdProvinceInfo");
const IOLib_StructType StructType_NDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame		=	_T("NDS_UpdCityInfoListDataFrame");


////////////////////////////////////////////////////////////////////////////////
//
// Function: CountInsideRefElem
// Detail: データを書き込むと同時に、内部関係をWriteBackする用の情報(数)を更新する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
void CNDS_UpdCityInfoList_NDS_UpdateInfo_UpdInfoList_FormatNode::CountInsideRefElem()
{
	if( StructType_NDS_UpdInfo_NDS_UpdateInfo != m_pclParent->m_enType ) {
		assert( 0 );
		return;
	}
	CNDS_UpdCityInfoList_NDS_UpdateInfo_InsideRef	*pclParent	=	(CNDS_UpdCityInfoList_NDS_UpdateInfo_InsideRef*)(m_pclParent->GetCurInsideRefElem());
	if( NULL == pclParent ) {
		assert( 0 );
		return;
	}
	++pclParent->m_uiUpdInfoList_COUNT;
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: GetCurInsideRefElem
// Detail: データを書き込むと同時に、内部関係をWriteBackする用の情報(MetaData)のPointerを取得する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
void* CNDS_UpdCityInfoList_NDS_UpdCityInfo_UpdInfo_FormatNode::GetCurInsideRefElem()
{
	if( NULL != m_pvCurInsideRefElem ) {
		return m_pvCurInsideRefElem;
	} else {
		if( StructType_NDS_UpdCityInfoList_NDS_UpdCityInfo != m_pclParent->m_enType ) {
			assert( 0 );
			return NULL;
		}
		CNDS_UpdCityInfoList_NDS_UpdCityInfo_InsideRef	*pclParent	=	(CNDS_UpdCityInfoList_NDS_UpdCityInfo_InsideRef*)(m_pclParent->GetCurInsideRefElem());
		if( NULL == pclParent ) {
			assert( 0 );
			return NULL;
		}
		m_pvCurInsideRefElem	=	(void*)(&(pclParent->m_clUpdInfo));
		++m_ulRecCount;
		return m_pvCurInsideRefElem;
	}
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: GetCurInsideRefElem
// Detail: データを書き込むと同時に、内部関係をWriteBackする用の情報(MetaData)のPointerを取得する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
void* CNDS_UpdCityInfoList_NDS_UpdProvinceInfo_UpdInfo_FormatNode::GetCurInsideRefElem()
{
	if( NULL != m_pvCurInsideRefElem ) {
		return m_pvCurInsideRefElem;
	} else {
		if( StructType_NDS_UpdCityInfoList_NDS_UpdProvinceInfo != m_pclParent->m_enType ) {
			assert( 0 );
			return NULL;
		}
		CNDS_UpdCityInfoList_NDS_UpdProvinceInfo_InsideRef	*pclParent	=	(CNDS_UpdCityInfoList_NDS_UpdProvinceInfo_InsideRef*)(m_pclParent->GetCurInsideRefElem());
		if( NULL == pclParent ) {
			assert( 0 );
			return NULL;
		}
		m_pvCurInsideRefElem	=	(void*)(&(pclParent->m_clUpdInfo));
		++m_ulRecCount;
		return m_pvCurInsideRefElem;
	}
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: GetCurInsideRefElem
// Detail: データを書き込むと同時に、内部関係をWriteBackする用の情報(MetaData)のPointerを取得する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
void* CNDS_UpdCityInfoList_NDS_UpdProvinceInfo_CityList_FormatNode::GetCurInsideRefElem()
{
	if( NULL != m_pvCurInsideRefElem ) {
		return m_pvCurInsideRefElem;
	} else {
		if( StructType_NDS_UpdCityInfoList_NDS_UpdProvinceInfo != m_pclParent->m_enType ) {
			assert( 0 );
			return NULL;
		}
		CNDS_UpdCityInfoList_NDS_UpdProvinceInfo_InsideRef	*pclParent	=	(CNDS_UpdCityInfoList_NDS_UpdProvinceInfo_InsideRef*)(m_pclParent->GetCurInsideRefElem());
		if( NULL == pclParent ) {
			assert( 0 );
			return NULL;
		}
		m_pvCurInsideRefElem	=	(void*)(&(pclParent->m_clCityList));
		++m_ulRecCount;
		return m_pvCurInsideRefElem;
	}
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: CountInsideRefElem
// Detail: データを書き込むと同時に、内部関係をWriteBackする用の情報(数)を更新する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
void CNDS_UpdCityInfoList_NDS_UpdProvinceInfo_CityList_FormatNode::CountInsideRefElem()
{
	if( StructType_NDS_UpdCityInfoList_NDS_UpdProvinceInfo != m_pclParent->m_enType ) {
		assert( 0 );
		return;
	}
	CNDS_UpdCityInfoList_NDS_UpdProvinceInfo_InsideRef	*pclParent	=	(CNDS_UpdCityInfoList_NDS_UpdProvinceInfo_InsideRef*)(m_pclParent->GetCurInsideRefElem());
	if( NULL == pclParent ) {
		assert( 0 );
		return;
	}
	++pclParent->m_uiCityList_COUNT;
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: GetCurInsideRefElem
// Detail: データを書き込むと同時に、内部関係をWriteBackする用の情報(MetaData)のPointerを取得する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
void* CNDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame_UpdInfo_FormatNode::GetCurInsideRefElem()
{
	if( NULL != m_pvCurInsideRefElem ) {
		return m_pvCurInsideRefElem;
	} else {
		if( StructType_NDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame != m_pclParent->m_enType ) {
			assert( 0 );
			return NULL;
		}
		CNDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame_InsideRef	*pclParent	=	(CNDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame_InsideRef*)(m_pclParent->GetCurInsideRefElem());
		if( NULL == pclParent ) {
			assert( 0 );
			return NULL;
		}
		m_pvCurInsideRefElem	=	(void*)(&(pclParent->m_clUpdInfo));
		++m_ulRecCount;
		return m_pvCurInsideRefElem;
	}
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: GetCurInsideRefElem
// Detail: データを書き込むと同時に、内部関係をWriteBackする用の情報(MetaData)のPointerを取得する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
void* CNDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame_ProvinceList_FormatNode::GetCurInsideRefElem()
{
	if( NULL != m_pvCurInsideRefElem ) {
		return m_pvCurInsideRefElem;
	} else {
		if( StructType_NDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame != m_pclParent->m_enType ) {
			assert( 0 );
			return NULL;
		}
		CNDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame_InsideRef	*pclParent	=	(CNDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame_InsideRef*)(m_pclParent->GetCurInsideRefElem());
		if( NULL == pclParent ) {
			assert( 0 );
			return NULL;
		}
		m_pvCurInsideRefElem	=	(void*)(&(pclParent->m_clProvinceList));
		++m_ulRecCount;
		return m_pvCurInsideRefElem;
	}
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: CountInsideRefElem
// Detail: データを書き込むと同時に、内部関係をWriteBackする用の情報(数)を更新する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
void CNDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame_ProvinceList_FormatNode::CountInsideRefElem()
{
	if( StructType_NDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame != m_pclParent->m_enType ) {
		assert( 0 );
		return;
	}
	CNDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame_InsideRef	*pclParent	=	(CNDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame_InsideRef*)(m_pclParent->GetCurInsideRefElem());
	if( NULL == pclParent ) {
		assert( 0 );
		return;
	}
	++pclParent->m_uiProvinceList_COUNT;
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: GetCurInsideRefElem
// Detail: データを書き込むと同時に、内部関係をWriteBackする用の情報(MetaData)のPointerを取得する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
void* CNDS_UpdCityInfoList_NDS_UpdRegionInfo_UpdateInfo_FormatNode::GetCurInsideRefElem()
{
	if( NULL != m_pvCurInsideRefElem ) {
		return m_pvCurInsideRefElem;
	} else {
		if( StructType_NDS_UpdInfo_NDS_UpdRegionInfo != m_pclParent->m_enType ) {
			assert( 0 );
			return NULL;
		}
		CNDS_UpdCityInfoList_NDS_UpdRegionInfo_InsideRef	*pclParent	=	(CNDS_UpdCityInfoList_NDS_UpdRegionInfo_InsideRef*)(m_pclParent->GetCurInsideRefElem());
		if( NULL == pclParent ) {
			assert( 0 );
			return NULL;
		}
		m_pvCurInsideRefElem	=	(void*)(&(pclParent->m_clUpdateInfo));
		++m_ulRecCount;
		return m_pvCurInsideRefElem;
	}
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: GetRootInsideRefElem
// Detail: 内部関係用のフォーマットツリー(MetaData)のルートノードを取得する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
void* CRoot_NDS_UpdCityInfoListDataFrame_FormatNode::GetCurInsideRefElem()
{
	if( NULL == m_pclFormatStructure ) {
		return NULL;
	}
	return m_pclFormatStructure->GetRootInsideRefElem();
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: Initialize
// Detail: 内部関係をWriteBackする用の情報(MetaData)の初期化
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
int CNDS_UpdCityInfoList_FormatStructure::Initialize()
{
	m_pclRootNode						=	new CRoot_NDS_UpdCityInfoListDataFrame_FormatNode( this );

	CBaseNode	*pclCurNode		=	m_pclRootNode;

	if( SUCCESS != pclCurNode->AddSub( new CNDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame_UpdInfo_FormatNode() ) ) {
		assert( 0 );
		return FAILURE;
	}
	pclCurNode	=	pclCurNode->m_vpclSub.back();
	if( SUCCESS != pclCurNode->AddSub( new CNDS_UpdCityInfoList_NDS_UpdateInfo_UpdInfoList_FormatNode() ) ) {
		assert( 0 );
		return FAILURE;
	}
	pclCurNode	=	pclCurNode->m_vpclSub.back();
	pclCurNode	=	pclCurNode->m_pclParent;
	pclCurNode	=	pclCurNode->m_pclParent;
	if( SUCCESS != pclCurNode->AddSub( new CNDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame_ProvinceList_FormatNode() ) ) {
		assert( 0 );
		return FAILURE;
	}
	pclCurNode	=	pclCurNode->m_vpclSub.back();
	if( SUCCESS != pclCurNode->AddSub( new CNDS_UpdCityInfoList_NDS_UpdProvinceInfo_UpdInfo_FormatNode() ) ) {
		assert( 0 );
		return FAILURE;
	}
	pclCurNode	=	pclCurNode->m_vpclSub.back();
	if( SUCCESS != pclCurNode->AddSub( new CNDS_UpdCityInfoList_NDS_UpdateInfo_UpdInfoList_FormatNode() ) ) {
		assert( 0 );
		return FAILURE;
	}
	pclCurNode	=	pclCurNode->m_vpclSub.back();
	pclCurNode	=	pclCurNode->m_pclParent;
	pclCurNode	=	pclCurNode->m_pclParent;
	if( SUCCESS != pclCurNode->AddSub( new CNDS_UpdCityInfoList_NDS_UpdProvinceInfo_CityList_FormatNode() ) ) {
		assert( 0 );
		return FAILURE;
	}
	pclCurNode	=	pclCurNode->m_vpclSub.back();
	if( SUCCESS != pclCurNode->AddSub( new CNDS_UpdCityInfoList_NDS_UpdCityInfo_UpdInfo_FormatNode() ) ) {
		assert( 0 );
		return FAILURE;
	}
	pclCurNode	=	pclCurNode->m_vpclSub.back();
	if( SUCCESS != pclCurNode->AddSub( new CNDS_UpdCityInfoList_NDS_UpdateInfo_UpdInfoList_FormatNode() ) ) {
		assert( 0 );
		return FAILURE;
	}
	pclCurNode	=	pclCurNode->m_vpclSub.back();
	pclCurNode	=	pclCurNode->m_pclParent;
	pclCurNode	=	pclCurNode->m_pclParent;
	pclCurNode	=	pclCurNode->m_pclParent;
	pclCurNode	=	pclCurNode->m_pclParent;

#ifdef	_DEBUG
	Print( m_pclRootNode, 0 );
#endif

	return SUCCESS;
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: GetRootInsideRefElem
// Detail: 内部関係用のフォーマットツリー(MetaData)のルートノードを取得する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
void* CNDS_UpdCityInfoList_FormatStructure::GetRootInsideRefElem()
{
	return (void*)&GetInsideRefInfo();
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: GetInsideRefInfo
// Detail: 内部関係用のフォーマットツリー(MetaData)のルートノードを取得する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
CNDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame_InsideRef& CNDS_UpdCityInfoList_FormatStructure::GetInsideRefInfo()
{
	return m_clNDS_UpdCityInfoListDataFrame_InsideRef;
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: NDS_UpdCityInfoListGetCurNDS_UpdateInfo_InsideRef
// Detail: 内部関係用のフォーマットツリー(MetaData)のノードを取得する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
CNDS_UpdCityInfoList_NDS_UpdateInfo_InsideRef* NDS_UpdCityInfoList_GetCurNDS_UpdateInfo_InsideRef( CBaseFormatStructure *pclFormatStructure )
{
	CBaseNode	*pclCurNode	=	pclFormatStructure->GetCurNode();
	if( NULL == pclCurNode ) {
		assert( 0 );
		return NULL;
	}
	if( StructType_NDS_UpdInfo_NDS_UpdateInfo != pclCurNode->m_enType ) {
		assert( 0 );
		return NULL;
	}
	return (CNDS_UpdCityInfoList_NDS_UpdateInfo_InsideRef*)(pclCurNode->GetCurInsideRefElem());
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: NDS_UpdCityInfoListGetCurNDS_UpdCityInfo_InsideRef
// Detail: 内部関係用のフォーマットツリー(MetaData)のノードを取得する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
CNDS_UpdCityInfoList_NDS_UpdCityInfo_InsideRef* NDS_UpdCityInfoList_GetCurNDS_UpdCityInfo_InsideRef( CBaseFormatStructure *pclFormatStructure )
{
	CBaseNode	*pclCurNode	=	pclFormatStructure->GetCurNode();
	if( NULL == pclCurNode ) {
		assert( 0 );
		return NULL;
	}
	if( StructType_NDS_UpdCityInfoList_NDS_UpdCityInfo != pclCurNode->m_enType ) {
		assert( 0 );
		return NULL;
	}
	return (CNDS_UpdCityInfoList_NDS_UpdCityInfo_InsideRef*)(pclCurNode->GetCurInsideRefElem());
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: NDS_UpdCityInfoListGetCurNDS_UpdProvinceInfo_InsideRef
// Detail: 内部関係用のフォーマットツリー(MetaData)のノードを取得する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
CNDS_UpdCityInfoList_NDS_UpdProvinceInfo_InsideRef* NDS_UpdCityInfoList_GetCurNDS_UpdProvinceInfo_InsideRef( CBaseFormatStructure *pclFormatStructure )
{
	CBaseNode	*pclCurNode	=	pclFormatStructure->GetCurNode();
	if( NULL == pclCurNode ) {
		assert( 0 );
		return NULL;
	}
	if( StructType_NDS_UpdCityInfoList_NDS_UpdProvinceInfo != pclCurNode->m_enType ) {
		assert( 0 );
		return NULL;
	}
	return (CNDS_UpdCityInfoList_NDS_UpdProvinceInfo_InsideRef*)(pclCurNode->GetCurInsideRefElem());
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: NDS_UpdCityInfoListGetCurNDS_UpdCityInfoListDataFrame_InsideRef
// Detail: 内部関係用のフォーマットツリー(MetaData)のノードを取得する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
CNDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame_InsideRef* NDS_UpdCityInfoList_GetCurNDS_UpdCityInfoListDataFrame_InsideRef( CBaseFormatStructure *pclFormatStructure )
{
	CBaseNode	*pclCurNode	=	pclFormatStructure->GetCurNode();
	if( NULL == pclCurNode ) {
		assert( 0 );
		return NULL;
	}
	if( StructType_NDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame != pclCurNode->m_enType ) {
		assert( 0 );
		return NULL;
	}
	return (CNDS_UpdCityInfoList_NDS_UpdCityInfoListDataFrame_InsideRef*)(pclCurNode->GetCurInsideRefElem());
}


////////////////////////////////////////////////////////////////////////////////
//
// Function: NDS_UpdCityInfoListGetCurNDS_UpdRegionInfo_InsideRef
// Detail: 内部関係用のフォーマットツリー(MetaData)のノードを取得する
// Return:long 型
//               SUCCESS  : (Succeeded)             
//               FAILURE : (Failed)
////////////////////////////////////////////////////////////////////////////////
CNDS_UpdCityInfoList_NDS_UpdRegionInfo_InsideRef* NDS_UpdCityInfoList_GetCurNDS_UpdRegionInfo_InsideRef( CBaseFormatStructure *pclFormatStructure )
{
	CBaseNode	*pclCurNode	=	pclFormatStructure->GetCurNode();
	if( NULL == pclCurNode ) {
		assert( 0 );
		return NULL;
	}
	if( StructType_NDS_UpdInfo_NDS_UpdRegionInfo != pclCurNode->m_enType ) {
		assert( 0 );
		return NULL;
	}
	return (CNDS_UpdCityInfoList_NDS_UpdRegionInfo_InsideRef*)(pclCurNode->GetCurInsideRefElem());
}

void NDS_UpdCityInfoList_CountNDS_UpdCateInfo_InsideRefElem( CBaseFormatStructure *pclFormatStructure )
{
	CBaseNode	*pclCurNode	=	pclFormatStructure->GetCurNode();
	if( NULL == pclCurNode ) {
		assert( 0 );
		return;
	}
	if( StructType_NDS_UpdInfo_NDS_UpdCateInfo != pclCurNode->m_enType ) {
		assert( 0 );
		return;
	}
	pclCurNode->CountInsideRefElem();
}

void NDS_UpdCityInfoList_CountNDS_UpdCityInfo_InsideRefElem( CBaseFormatStructure *pclFormatStructure )
{
	CBaseNode	*pclCurNode	=	pclFormatStructure->GetCurNode();
	if( NULL == pclCurNode ) {
		assert( 0 );
		return;
	}
	if( StructType_NDS_UpdCityInfoList_NDS_UpdCityInfo != pclCurNode->m_enType ) {
		assert( 0 );
		return;
	}
	pclCurNode->CountInsideRefElem();
}

void NDS_UpdCityInfoList_CountNDS_UpdProvinceInfo_InsideRefElem( CBaseFormatStructure *pclFormatStructure )
{
	CBaseNode	*pclCurNode	=	pclFormatStructure->GetCurNode();
	if( NULL == pclCurNode ) {
		assert( 0 );
		return;
	}
	if( StructType_NDS_UpdCityInfoList_NDS_UpdProvinceInfo != pclCurNode->m_enType ) {
		assert( 0 );
		return;
	}
	pclCurNode->CountInsideRefElem();
}

